import asyncio
import random
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = ""  

bot = Bot(token=TOKEN)
dp = Dispatcher()


words = {
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": {
        "apple": "—è–±–ª–æ–∫–æ", "dog": "—Å–æ–±–∞–∫–∞", "car": "–º–∞—à–∏–Ω–∞", "house": "–¥–æ–º",
        "sun": "—Å–æ–ª–Ω—Ü–µ", "tree": "–¥–µ—Ä–µ–≤–æ", "book": "–∫–Ω–∏–≥–∞", "friend": "–¥—Ä—É–≥",
        "school": "—à–∫–æ–ª–∞", "cat": "–∫–æ—Ç", "food": "–µ–¥–∞", "computer": "–∫–æ–º–ø—å—é—Ç–µ—Ä",
        "phone": "—Ç–µ–ª–µ—Ñ–æ–Ω", "pen": "—Ä—É—á–∫–∞", "table": "—Å—Ç–æ–ª", "chair": "—Å—Ç—É–ª",
        "window": "–æ–∫–Ω–æ", "city": "–≥–æ—Ä–æ–¥", "mountain": "–≥–æ—Ä–∞", "river": "—Ä–µ–∫–∞"
    },
    "–ò—Å–ø–∞–Ω—Å–∫–∏–π": {
        "manzana": "—è–±–ª–æ–∫–æ", "perro": "—Å–æ–±–∞–∫–∞", "coche": "–º–∞—à–∏–Ω–∞", "casa": "–¥–æ–º",
        "sol": "—Å–æ–ª–Ω—Ü–µ", "√°rbol": "–¥–µ—Ä–µ–≤–æ", "libro": "–∫–Ω–∏–≥–∞", "amigo": "–¥—Ä—É–≥",
        "escuela": "—à–∫–æ–ª–∞", "gato": "–∫–æ—Ç", "comida": "–µ–¥–∞", "ordenador": "–∫–æ–º–ø—å—é—Ç–µ—Ä",
        "tel√©fono": "—Ç–µ–ª–µ—Ñ–æ–Ω", "bol√≠grafo": "—Ä—É—á–∫–∞", "mesa": "—Å—Ç–æ–ª", "silla": "—Å—Ç—É–ª",
        "ventana": "–æ–∫–Ω–æ", "ciudad": "–≥–æ—Ä–æ–¥", "monta√±a": "–≥–æ—Ä–∞", "r√≠o": "—Ä–µ–∫–∞"
    },
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": {
        "pomme": "—è–±–ª–æ–∫–æ", "chien": "—Å–æ–±–∞–∫–∞", "voiture": "–º–∞—à–∏–Ω–∞", "maison": "–¥–æ–º",
        "soleil": "—Å–æ–ª–Ω—Ü–µ", "arbre": "–¥–µ—Ä–µ–≤–æ", "livre": "–∫–Ω–∏–≥–∞", "ami": "–¥—Ä—É–≥",
        "√©cole": "—à–∫–æ–ª–∞", "chat": "–∫–æ—Ç", "nourriture": "–µ–¥–∞", "ordinateur": "–∫–æ–º–ø—å—é—Ç–µ—Ä",
        "t√©l√©phone": "—Ç–µ–ª–µ—Ñ–æ–Ω", "stylo": "—Ä—É—á–∫–∞", "table": "—Å—Ç–æ–ª", "chaise": "—Å—Ç—É–ª",
        "fen√™tre": "–æ–∫–Ω–æ", "ville": "–≥–æ—Ä–æ–¥", "montagne": "–≥–æ—Ä–∞", "rivi√®re": "—Ä–µ–∫–∞"
    },
}

emoji_words = {
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": {"üåû": "sun", "üöó": "car", "üê∂": "dog", "üè†": "house", "üçè": "apple"},
    "–ò—Å–ø–∞–Ω—Å–∫–∏–π": {"üåû": "sol", "üöó": "coche", "üê∂": "perro", "üè†": "casa", "üçè": "manzana"},
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": {"üåû": "soleil", "üöó": "voiture", "üê∂": "chien", "üè†": "maison", "üçè": "pomme"},
}

sentences = {
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": [
        ("I am a student", ["I", "am", "a", "student"]),
        ("This is my house", ["This", "is", "my", "house"]),
        ("He has a dog", ["He", "has", "a", "dog"]),
        ("The sun is bright", ["The", "sun", "is", "bright"])
    ],
    "–ò—Å–ø–∞–Ω—Å–∫–∏–π": [
        ("Yo soy un estudiante", ["Yo", "soy", "un", "estudiante"]),
        ("Esta es mi casa", ["Esta", "es", "mi", "casa"]),
        ("√âl tiene un perro", ["√âl", "tiene", "un", "perro"]),
        ("El sol es brillante", ["El", "sol", "es", "brillante"])
    ],
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": [
        ("Je suis un √©tudiant", ["Je", "suis", "un", "√©tudiant"]),
        ("Ceci est ma maison", ["Ceci", "est", "ma", "maison"]),
        ("Il a un chien", ["Il", "a", "un", "chien"]),
        ("Le soleil est brillant", ["Le", "soleil", "est", "brillant"])
    ]
}

current_game = {}
user_languages = {}
used_words = {}
used_emoji = {}
sentence_game = {}


language_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=lang)] for lang in words.keys()],
    resize_keyboard=True
)

game_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ò–≥—Ä–∞—Ç—å –≤ —Å–ª–æ–≤–∞")],
        [KeyboardButton(text="–ö–≤–∏–∑")],
        [KeyboardButton(text="–ò–≥—Ä–∞—Ç—å –≤ —ç–º–æ–¥–∑–∏")],
        [KeyboardButton(text="–°–æ—Å—Ç–∞–≤—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")],
        [KeyboardButton(text="–°–ª–æ–≤–∞—Ä—å")],
        [KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")]
    ],
    resize_keyboard=True
)

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.chat.id
    user_language = user_languages.get(user_id, "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π")

    if message.text == "/start" or message.text == "üîÑ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫":
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=language_keyboard)

    elif message.text in words.keys():
        user_languages[user_id] = message.text
        used_words[user_id] = set()
        used_emoji[user_id] = set()
        await message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª {message.text}. –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", reply_markup=game_keyboard)

    elif message.text == "–ò–≥—Ä–∞—Ç—å –≤ —Å–ª–æ–≤–∞":
        available_words = list(set(words[user_language].keys()) - used_words.get(user_id, set()))
        if available_words:
            word = random.choice(available_words)
            translation = words[user_language][word]
            current_game[user_id] = translation
            used_words[user_id].add(word)
            await message.answer(f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: {word}?")
        else:
            await message.answer("‚úÖ –í—Å–µ —Å–ª–æ–≤–∞ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã! –ù–∞—á–Ω–∏ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.", reply_markup=game_keyboard)
            used_words[user_id] = set()

    elif message.text == "–ö–≤–∏–∑":
        available_words = list(set(words[user_language].keys()) - used_words.get(user_id, set()))
        if available_words:
            word = random.choice(available_words)
            correct_translation = words[user_language][word]
            used_words[user_id].add(word)
            options = list(words[user_language].values())
            options.remove(correct_translation)
            choices = random.sample(options, min(3, len(options))) + [correct_translation]
            random.shuffle(choices)
            quiz_keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=choice)] for choice in choices],
                resize_keyboard=True
            )
            current_game[user_id] = correct_translation
            await message.answer(f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: {word}?", reply_markup=quiz_keyboard)
        else:
            await message.answer("‚úÖ –í—Å–µ —Å–ª–æ–≤–∞ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã! –ù–∞—á–Ω–∏ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.", reply_markup=game_keyboard)
            used_words[user_id] = set()

    elif message.text == "–ò–≥—Ä–∞—Ç—å –≤ —ç–º–æ–¥–∑–∏":
        available_emoji = list(set(emoji_words[user_language].keys()) - used_emoji.get(user_id, set()))
        if available_emoji:
            emoji = random.choice(available_emoji)
            translation = emoji_words[user_language][emoji]
            current_game[user_id] = translation
            used_emoji[user_id].add(emoji)
            options = list(emoji_words[user_language].values())
            options.remove(translation)
            choices = random.sample(options, min(3, len(options))) + [translation]
            random.shuffle(choices)
            quiz_keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=choice)] for choice in choices],
                resize_keyboard=True
            )
            await message.answer(f"–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —ç—Ç–æ—Ç —ç–º–æ–¥–∑–∏? {emoji}", reply_markup=quiz_keyboard)
        else:
            await message.answer("‚úÖ –í—Å–µ —ç–º–æ–¥–∑–∏ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã! –ù–∞—á–Ω–∏ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.", reply_markup=game_keyboard)
            used_emoji[user_id] = set()

    elif message.text == "–°–æ—Å—Ç–∞–≤—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ":
        original, parts = random.choice(sentences[user_language])
        shuffled = parts.copy()
        random.shuffle(shuffled)
        sentence_game[user_id] = {"answer": original, "parts": parts}
        btns = [[KeyboardButton(text=word)] for word in shuffled]
        btns.append([KeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥")])
        await message.answer("–°–æ–±–µ—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤:", reply_markup=ReplyKeyboardMarkup(keyboard=btns, resize_keyboard=True))

    elif message.text == "–°–ª–æ–≤–∞—Ä—å":
        dictionary = "\n".join([f"{word} - {translation}" for word, translation in words[user_language].items()])
        await message.answer(f"üìñ –í–æ—Ç –≤—Å–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —è –∑–Ω–∞—é:\n{dictionary}")

    elif message.text == "‚Ü© –ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", reply_markup=game_keyboard)

    else:
        correct_translation = current_game.get(user_id)
        if correct_translation:
            if message.text.lower().strip() == correct_translation.lower():
                await message.answer("‚úÖ –í–µ—Ä–Ω–æ! –í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –∏–≥—Ä—É.", reply_markup=game_keyboard)
                del current_game[user_id]
            else:
                await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        elif user_id in sentence_game:
            user_sentence = message.text.strip()
            correct_sentence = sentence_game[user_id]["answer"]
            if user_sentence.lower() == correct_sentence.lower():
                await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!", reply_markup=game_keyboard)
                del sentence_game[user_id]
            else:
                await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ ‚Ü© –ù–∞–∑–∞–¥.")

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())